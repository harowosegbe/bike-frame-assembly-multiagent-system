/*
    Bike Frame Assembly Multi-Agent System Pseudocode

    Hammed Arowosegbe 
    Sen Chai 
    Gauri Mahangare
    Natchar Ratanasirigulchai 

    CSK 504 Multi-Agents Systems

    The Design utilizes a Primary and Secondary Architecture, the 1 Holding Agent been the primaty brain
*/


/*
    1. Secondary Agent Function

    Robotic Arm
    Moving Agent
    Secondary Holding Agent
    Welding Agent

*/


/*
    Robotic Arm Agent Function

    Here the robotic arm recieves a request from an holding agent gets the frame part from the bin
    and delivers it to the requesting holding agent

*/

SET isIdle = true

// Recieves request from Holding Agent

FUNCTION GetPartFromRoboticArm(holdingPart, partId, requestingAgentId)

    IF isIdle is false THEN
        RETURN error
    ENDIF

    SET isIdle = false
    GetPart(partId)
    DeliverPart(requestingAgentId)
    SET isIdle = true

ENDFUNCTION  


// Gets the part from the Bin

FUNCTION GetPart(partId)
    IF partId does exist in CheckItemFromBin() THEN
        WHILE roboticArmTip has not grabbed part
            MoveRoboticArmAndGrab()
        ENDWHILE
    ENDIF
ENDFUNCTION


// Delivers the part to the requesting holding agent

FUNCTION DeliverPart(requestingAgentId)
    WHILE roboticArm has not delivered part to requestingAgentId
        MoveRoboticArmAndDeliver()
    ENDWHILE
ENDFUNCTION


/*
    Secondary Holding Agent Function

    Here the holding agent confirms parts to the welded and request parts from robotic arm

*/

SET isMain = false
SET holdingPart = false

// Recieves request from Main Holding Agent on frame part to hold

FUNCTION HoldFramePart(roboticAgentId, partId, HoldingAgentMain)

    IF holdingPart is true THEN
        RETURN error
    ENDIF

    //Here we allow the main holding agent to register the secondary holding agent
    HoldingAgentMain.AcceptPartnership(THIS)

    ConfirmPartGoal(HoldingAgentMain,partId)
    GetPartFromRoboticArm(roboticAgentId, partId, THIS)
    
    SET holdingPart = true

ENDFUNCTION  


// Gets the part from the Bin

FUNCTION ConfirmPartGoal(HoldingAgentMain, partId)
    IF partId exist in HoldingAgentMain.currentPartGoal THEN
        HoldingAgentMain.RemovePartGoal(partId)
    ELSE
        RETURN error    
    ENDIF
ENDFUNCTION


// Resets the holdingArm, this function drops the part that has been welded

FUNCTION Reset()
    ResetHoldingArm()
    SET holdingPart = false
ENDFUNCTION


/*
    Welding Holding Agent Function

    This functions recieves requests from the main holding agent, welds the part at the desired point and resets the holding agent.

*/

SET isIdle = true

FUNCTION WeldParts(mainHoldingAgent, requestingHoldingAgents = [], weldingPoints)

    IF isIdle is true THEN
        SET isIdle = false

        Weld(weldingPoints, requestingHoldingAgents)

        mainHoldingAgent.FinishedWelding()

        FOR holdingAgents in requestingHoldingAgents
            holdingAgents.Reset()
        ENDFOR
    
    ENDIF

ENDFUNCTION  


/*
    Moving Agent Function

    This function checks if the main holding agent has completed the assembly, gets the assembled frame and delivers it

*/

FUNCTION GetWeldedBike(mainHoldingAgent)
    IF mainHoldingAgent.hasCompletedAssembly() is true THEN
        RequestBike()
        DeliverBike()
    ENDIF
ENDFUNCTION


/*
    2. Primary/Main Holding Agent Function

    This fucntions extends the secondary holding agent
    It serves as the MAS brain and coordinates all actions
*/

SET isMain = true
SET holdingPart = false
SET currentPartners = [][]
SET partsConnected = 0
SET partsGoal = input ("Number of welded parts points required")
SET secondaryHoldingAgents = []
SET frameAssemblySteps = [][] // Blueprints of welded parts, required robotic arms, parts and welding points

FUNCTION MainHoldingAgent() EXTENDS SecondaryHoldingAgent

    // Check if we have completed the goal
    IF partsConnected is not equals to partsGoal THEN

        FOR currentAssembly in frameAssemblySteps
            SET currentHoldingAgents = []
            FOR agents in secondaryHoldingAgents 
                SET currentHoldingAgents[i] = agents
                agents.HoldFramePart(currentAssembly.roboticArmId, currentAssembly.getNextPartId, THIS)
            ENDFOR

            WeldParts(THIS, currentHoldingAgents, currentAssembly.weldPoint)
        ENDFOR

        GetWeldedBike(THIS)
    ENDIF

ENDFUNCTION

// Increment the parts connected goal
FUNCTION FinishedWelding()
    INCREMENT partsConnected
    BroadcastEvent()
ENDFUNCTION

// Return a boolean if the frame as been assembled succesfully
FUNCTION hasCompletedAssembly()
    IF partsConnected is equals to partsGoal THEN
        RETURN true
    ELSE 
        RETURN false
    ENDIF
ENDFUNCTION



